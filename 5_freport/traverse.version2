#include "freport.h"

int traverse( char *pathname, int myfun(), struct timespec *now, int opt, const char *startpoint, int check4symb )
{
	DIR *dirp;
	struct dirent *pentry;
	struct stat buf;
	char *fullname;
	char *symb_content;
	static int fullen = 128;
	int pathlen, filelen;

#ifdef HSSDEBUG
	fprintf(stdout, "start traverse of pathname: %s: ", pathname);
#endif

	if( ( lstat(pathname, &buf) ) == -1 )
	{
		fprintf( stderr, "error get stat info: %s\n", pathname );
		return -1;
	}

	if( (buf.st_nlink > 1) || ( check4symb == 1 ) )
	{
#ifdef HSSDEBUG
		fprintf(stdout, "hashcheck for %s %s", buf.st_nlink > 1 ? "nlink>1":" " ,  check4symb==1 ? "check4symb==1": " " );
#endif
		if( hashcheck( buf.st_ino ) )   // has been traversed
		{
#ifdef HSSDEBUG
		fprintf(stdout, "hashcheck faied, has been traversed\n" );
#endif
			return 0;
		}
#ifdef HSSDEBUG
		fprintf(stdout, "1st time to be traversed:\n" );
#endif	
	}


	if( S_ISDIR(buf.st_mode) )
	{
#ifdef HSSDEBUG
		fprintf(stdout, "\n==== directory =====\n");
#endif
		if( ( dirp = opendir( pathname ) ) == NULL )
		{
			fprintf( stderr, "error open dir: %s\n", pathname);
			return(-3);
		}

		fullname = malloc(fullen);
		pathlen = strlen( pathname ); // exclulde \0

		while( ( pentry = readdir(dirp) ) != NULL )
		{
			if( ( strcmp( pentry->d_name, ".") == 0 ) || ( strcmp(pentry->d_name, "..") == 0 ) )
				continue;
			filelen = strlen( pentry->d_name );  // null terminated; strlen exclude \0
			while( fullen < pathlen + filelen + 2 )
			{
				fullen = 2 * fullen;
				fullname = realloc( fullname, fullen );
			}
			strcpy( fullname, pathname );
			strcat( fullname, "/\0");
			strcat( fullname, pentry->d_name ); 

			traverse( fullname, myfun, now, opt, startpoint, 0 );
			
		}
		free(fullname);	
		closedir(dirp);	
	}
	else if( S_ISLNK(buf.st_mode) )
	{
		symb_content = malloc( buf.st_size + 1 );
		if( readlink( pathname, symb_content, buf.st_size+1) != buf.st_size )
		{
			fprintf(stderr, "READLINK ERROR %s\n", pathname);
			return -2;
		}
		symb_content[buf.st_size] = '\0';
			
#ifdef HSSDEBUG
			fprintf(stdout, "Got symb_content = %s\n", symb_content);
#endif
		if( symb_content[0]=='/')  //absolute path
		{
		}
		else if( symb_content[0]='.')
			if(symb_content[1]='.')  // ..
			else			 // .
		else				 // start with startpoint


		if( buf.st_size >= strlen(startpoint) )
		{	
			if( strncmp( symb_content, startpoint, strlen(startpoint) ) == 0 ) 
			{
#ifdef HSSDEBUG
				fprintf(stdout, "( symbolic link to dir/file within startpoint, ignore~ ) ");
#endif
				return 0;
			}
			else
				traverse( symb_content, myfun, now, opt, startpoint, 1 );

		}
		else
			traverse( symb_content, myfun, now, opt, startpoint, 1 );

		free( symb_content);
	}
	else
	{
		myfun( pathname, &buf, now, opt );
	}


	return 0;

}


